//25.75.2.a.1 for j = 210720960000000/16807
P<x,y,z,w>:= ProjectiveSpace(Rationals(), 3);
P1 := ProjectiveSpace(Rationals(), 1);

j := [103015712335479732*x*y*z^14-32037482082756974*x*y*z^13*w+105548026566437138*x*y*z^12*w^2+2956612660738663*x*y*z^11*w^3+14870878269892421*x*y*z^10*w^4+48972707084822486*x*y*z^9*w^5+88175124224931968*x*y*z^8*w^6-72386015365833861*x*y*z^7*w^7-172187406461990091*x*y*z^6*w^8-85396716150629562*x*y*z^5*w^9-108623496156055768*x*y*z^4*w^10-61560239528229544*x*y*z^3*w^11+415867079243846048*x*y*z^2*w^12-570697896814603872*x*y*z*w^13+257665694417041216*x*y*w^14+953353315618072280*x*z^15-1276508548975124102*x*z^14*w+1422847149056800810*x*z^13*w^2-964572636068855739*x*z^12*w^3+568460963154667472*x*z^11*w^4-311293599092233691*x*z^10*w^5-128378935691559136*x*z^9*w^6+129297962113440075*x*z^8*w^7+388022771005838348*x*z^7*w^8+219001163085622641*x*z^6*w^9+195524494751662682*x*z^5*w^10+175901459753849088*x*z^4*w^11-677990367199540760*x*z^3*w^12+742377380558932416*x*z^2*w^13-161672325545198688*x*z*w^14-109669152070213696*x*w^15+184072220335479462*y^2*z^14-75775524983723396*y^2*z^13*w+185504701638420159*y^2*z^12*w^2-11114689574007919*y^2*z^11*w^3+53668812813019364*y^2*z^10*w^4+22429090870624186*y^2*z^9*w^5+59853834685634747*y^2*z^8*w^6-15210808432787283*y^2*z^7*w^7-77927022029666212*y^2*z^6*w^8-52807925855550428*y^2*z^5*w^9-33890578176357448*y^2*z^4*w^10-18325675279456176*y^2*z^3*w^11+83471641524645024*y^2*z^2*w^12-109805286306783744*y^2*z*w^13+48330792417409664*y^2*w^14+629848837679329500*y*z^15-722630929589206778*y*z^14*w+877653286853422870*y*z^13*w^2-526743431999640807*y*z^12*w^3+373482428964562307*y*z^11*w^4-132730081668172012*y*z^10*w^5-228594364152482104*y*z^9*w^6-11687755308375075*y*z^8*w^7+534207391737156919*y*z^7*w^8+531033192994680896*y*z^6*w^9+434801100218497604*y*z^5*w^10+245747616460822632*y*z^4*w^11-817470189157801520*y*z^3*w^12+943310578295486688*y*z^2*w^13-208231187860352128*y*z*w^14-144992377252228992*y*w^15-338123754028902490*z^16-441149219900483464*z^15*w+149448162553408929*z^14*w^2-683539796475397541*z^13*w^3+149496139068139903*z^12*w^4-331952650600479031*z^11*w^5+156955090435100807*z^10*w^6+191904362588450497*z^9*w^7-277412084796112853*z^8*w^8-678923104031501361*z^7*w^9-564439133276138448*z^6*w^10-488431161974514732*z^5*w^11+287256221361780424*z^4*w^12+295565509796068944*z^3*w^13-905908783024949792*z^2*w^14+450157418420540544*z*w^15+48330792417409664*w^16, 498710003332*x*y*z^14-16418148732974*x*y*z^13*w+216448686989018*x*y*z^12*w^2-1441195165676567*x*y*z^11*w^3+4828053185105821*x*y*z^10*w^4-6384585755225339*x*y*z^9*w^5-534495304647607*x*y*z^8*w^6-77067899028646*x*y*z^7*w^7+8768046079103094*x*y*z^6*w^8-23312762125188612*x*y*z^5*w^9-54253271500917668*x*y*z^4*w^10+69070716864964781*x*y*z^3*w^11+148670795848640953*x*y*z^2*w^12-87637311783013827*x*y*z*w^13-174018712118295759*x*y*w^14+4489329375288*x*z^15-155940483426638*x*z^14*w+2183292806306182*x*z^13*w^2-15546565294654609*x*z^12*w^3+58039728287915580*x*z^11*w^4-103727305116040944*x*z^10*w^5+72915142674062126*x*z^9*w^6-49117452246024299*x*z^8*w^7-4537433195198512*x*z^7*w^8+22905746690534330*x*z^6*w^9+101675212380139474*x*z^5*w^10-73005943104054663*x*z^4*w^11-271368470942703908*x*z^3*w^12+58612391875068996*x*z^2*w^13+310544865569510490*x*z*w^14+74066624847911107*x*w^15+872658761918*y^2*z^14-29305389839408*y^2*z^13*w+393036456860729*y^2*z^12*w^2-2629830518811937*y^2*z^11*w^3+8764026900856523*y^2*z^10*w^4-11744044113331291*y^2*z^9*w^5+1708151481444876*y^2*z^8*w^6-5419165851548698*y^2*z^7*w^7-175850543312956*y^2*z^6*w^8-5769698242502406*y^2*z^5*w^9-11906113697890527*y^2*z^4*w^10+11174588279980107*y^2*z^3*w^11+28868312730518019*y^2*z^2*w^12-14624270728238207*y^2*z*w^13-32645835242946742*y^2*w^14+2954144311500*y*z^15-102332280457530*y*z^14*w+1425093369586126*y*z^13*w^2-10022763311653313*y*z^12*w^3+36525703268561779*y*z^11*w^4-62327493041978667*y*z^10*w^5+41162304040149755*y*z^9*w^6-34349120592980752*y*z^8*w^7-17249988136633654*y*z^7*w^8+35641333916816272*y*z^6*w^9+123808073233024964*y*z^5*w^10-110769610536194625*y*z^4*w^11-346428724632600249*y*z^3*w^12+93820892160882117*y*z^2*w^13+406857468195166499*y*z*w^14+97922671455199778*y*w^15-1587477825730*z^16+51185358987324*z^15*w-632137003686197*z^14*w^2+3551372496092217*z^13*w^3-7121678551873400*z^12*w^4-9706546827678820*z^11*w^5+43512260472834943*z^10*w^6-12673559236114711*z^9*w^7+46713270331855736*z^8*w^8+11819749561842540*z^7*w^9-99183327429077015*z^6*w^10-67598373603299893*z^5*w^11+296609758771442808*z^4*w^12+271245416836555772*z^3*w^13-330792955545937715*z^2*w^14-392743080749744685*z*w^15-32640169054933174*w^16];

eqns := [x^2*z+x*y*z-3*x*z^2-2*y*z^2+z^3+2*z^2*w, x^2*y+x*y^2-3*x*y*z-2*y^2*z+y*z^2+2*y*z*w, x^3+x^2*y-3*x^2*z-2*x*y*z+x*z^2+2*x*z*w, x^2*w+x*y*w-3*x*z*w-2*y*z*w+z^2*w+2*z*w^2, 2*x^3+2*x^2*y-x*y^2-y^3+y^2*z-x*z^2-y*z^2+z^3+3*x*y*w+3*y^2*w-2*x*z*w+2*y*z*w-z^2*w-x*w^2-y*w^2-4*z*w^2, x^2*y-x*y^2-3*x^2*z+3*y^2*z-x*z^2-3*y*z^2+2*z^3+8*x^2*w-3*x*y*w-2*y^2*w-5*x*z*w+y*z*w+5*x*w^2+6*y*w^2-5*z*w^2-2*w^3];

C := Curve(P, eqns);
A := AutomorphismGroup(C);
jmap := map<P->P1 | [j[1]*2^6*5^3, j[2]]>;
smallpts := PointSearch(C, 100);
//we found the special point and the known CM point
assert {jmap(Q) : Q in smallpts} eq {P1![0,1], P1![210720960000000/16807, 1]}; 
assert (A.1)(smallpts[1]) eq smallpts[2];

//Xns^+(16)

P<x,y,z,w,t>:= ProjectiveSpace(Rationals(), 4);
P1 := ProjectiveSpace(Rationals(), 1);
P2 := WeightedProjectiveSpace(Rationals(),[1,3,1]);

j := [462964514908356*x*z*w^9-159622701463004*x*z*w^8*t-5586499641674960*x*z*w^7*t^2+98339629117519456*x*z*w^6*t^3+660043721859991996*x*z*w^5*t^4+1811818440155005436*x*z*w^4*t^5+2689283905141493832*x*z*w^3*t^6+2169235037419238336*x*z*w^2*t^7+801676094639586933*x*z*w*t^8+105703773285285725*x*z*t^9+764218391014080*x*w^10-1422681489247728*x*w^9*t-22522373083574348*x*w^8*t^2-44221434561617504*x*w^7*t^3-123507956973093864*x*w^6*t^4-98944459836447792*x*w^5*t^5+1297021708803009972*x*w^4*t^6+3429877626231618864*x*w^3*t^7+3026222413345985912*x*w^2*t^8+1105715128834045788*x*w*t^9+145001242570506361*x*t^10-344194600999320*y*w^10-613760207953940*y*w^9*t+7242416301639188*y*w^8*t^2+68757669266583168*y*w^7*t^3+454192207729161240*y*w^6*t^4+2153115125106462916*y*w^5*t^5+5521753870957545992*y*w^4*t^6+7407424001622272512*y*w^3*t^7+4996199981368079954*y*w^2*t^8+1580577721310723763*y*w*t^9+187394150205078105*y*t^10-878903590461444*z^2*w^9-1364411485406936*z^2*w^8*t+27019692189322672*z^2*w^7*t^2+119136400325639152*z^2*w^6*t^3+498793241211775140*z^2*w^5*t^4+1588895244425821752*z^2*w^4*t^5+2539942294658998408*z^2*w^3*t^6+1869829879661457656*z^2*w^2*t^7+625997847437722899*z^2*w*t^8+78430539594860914*z^2*t^9+882988304923116*z*w^10-797279321277588*z*w^9*t-42410312352477976*z*w^8*t^2-300209294476449984*z*w^7*t^3-1633225301148501820*z*w^6*t^4-4912177167195051612*z*w^5*t^5-7370480269298186708*z*w^4*t^6-5256849485178408192*z*w^3*t^7-1578479156802777953*z*w^2*t^8-99541906717049253*z*w*t^9+21478018504394454*z*t^10+420023790014760*w^11-222007827036788*w^10*t-17171350383279944*w^9*t^2-133677282136718828*w^8*t^3-804116403857131040*w^7*t^4-2622863819236666348*w^6*t^5-4175163790899632788*w^5*t^6-2809214562478593836*w^4*t^7+153164347249758578*w^3*t^8+1289628483371624851*w^2*t^9+616156135862255766*w*t^10+88556445841800849*t^11, 160884421854104*x*z*w^9+783907179493848*x*z*w^8*t+7113484196409824*x*z*w^7*t^2+73883443751265056*x*z*w^6*t^3+216253400619214264*x*z*w^5*t^4+513000719280289880*x*z*w^4*t^5+706410178827880560*x*z*w^3*t^6+605995454487672176*x*z*w^2*t^7+290707789582317950*x*z*w*t^8+58728442699165534*x*z*t^9+204716940975016*x*w^10-1041055751788112*x*w^9*t-11426620397438432*x*w^8*t^2-834702714687872*x*w^7*t^3-72826404598991624*x*w^6*t^4+125715601244581136*x*w^5*t^5+431597447303421984*x*w^4*t^6+821168694343805824*x*w^3*t^7+803533110384664762*x*w^2*t^8+405117041183791532*x*w*t^9+82944839343229000*x*t^10-99991972555104*y*w^10+52873302391392*y*w^9*t+7088960811070772*y*w^8*t^2+48511681951020768*y*w^7*t^3+239150957404891664*y*w^6*t^4+786126101344212080*y*w^5*t^5+1501610847412189852*y*w^4*t^6+1888211366852569488*y*w^3*t^7+1444119582782531728*y*w^2*t^8+610453274493289792*y*w*t^9+106760108225869589*y*t^10-236706127885096*z^2*w^9+419472055385488*z^2*w^8*t+17352685251387808*z^2*w^7*t^2+43497559973750912*z^2*w^6*t^3+233919791207155608*z^2*w^5*t^4+452741967960254512*z^2*w^4*t^5+628676960764944784*z^2*w^3*t^6+520282000819868128*z^2*w^2*t^7+236336555547357662*z^2*w*t^8+45070283085829636*z^2*t^9+190496912111224*z*w^10-2707457285415248*z*w^9*t-36990893595416436*z*w^8*t^2-163100094733990432*z*w^7*t^3-668512011387826456*z*w^6*t^4-1357401678464776736*z*w^5*t^5-1850334192637822364*z*w^4*t^6-1487566431828487024*z*w^3*t^7-631922841934763314*z*w^2*t^8-88224157576129772*z*w*t^9+12239936199955595*z*t^10+98750129641384*w^11-1076167028341984*w^10*t-16508299563052188*w^9*t^2-78780150573471152*w^8*t^3-342527329534286616*w^7*t^4-732986074388433808*w^6*t^5-1028158317114886900*w^5*t^6-747414337984133392*w^4*t^7-96574694801025694*w^3*t^8+287309177444371440*w^2*t^9+214139649237713681*w*t^10+49433156850459700*t^11];
map_to_ws_model :=[-x^2*y+x*y^2, 1/2*x^7*y^2-3/2*x^6*y^3+1/2*x^6*y^2*t+1/2*x^5*y^4-3*x^5*y^3*t+1/2*x^4*y^5+11/2*x^4*y^4*t+5/2*x^3*y^6-2*x^3*y^5*t-7/2*x^2*y^7-7/2*x^2*y^6*t+1/2*x*y^8+3*x*y^7*t+1/2*y^9-1/2*y^8*t, -x*y^2+y^3];
eqns := [x^2-y^2-x*w+y*w-y*t, y^2+y*z+x*w+x*t, x*y+x*z-z*w-w^2+y*t+t^2, x*y+x*z+y*z-z^2+x*w+z*w-x*t-y*t+t^2];

C := Curve(P, eqns);

jmap := map<P->P1 | [j[1]*2^9, j[2]]>;
to_ws := map<P -> P2 | map_to_ws_model>;

smallpts := PointSearch(C, 1000);
//we know there are 10 points
assert #smallpts eq 10; 
j1 := -35817550197738955933474532061609984000 / 2301619141096101839813550846721;
j2 := -18234932071051198464000 / 48661191875666868481;
//find the indices of the points with the exceptional j-invariants
exists(i1){i : i in [1..#smallpts] | jmap(smallpts[i]) eq P1![j1, 1]};
exists(i2){i : i in [1..#smallpts] | jmap(smallpts[i]) eq P1![j2, 1]};

Q1 := to_ws(smallpts[i1]);
Q2 := to_ws(smallpts[i2]);
R<a> := PolynomialRing(Rationals());
H := HyperellipticCurve(a^6 - 3*a^4 + a^2 + 1);
A, m := AutomorphismGroup(H);

Q1_ws := H!Eltseq(Q1);
Q2_ws := H!Eltseq(Q2);

tau := (m(A.1)); //hyperelliptic involution
sigma := m(A.3);
tau(Q1_ws) eq H!Eltseq(to_ws(smallpts[7]));
assert jmap(smallpts[7]) eq 0; //CM by -3
tau(Q2_ws) eq  H!Eltseq(to_ws(smallpts[9]));
assert jmap(smallpts[9]) eq -262537412640768000; //CM by -163


